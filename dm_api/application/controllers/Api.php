<?php
defined('BASEPATH') OR exit('No direct script access allowed');
require(APPPATH.'/libraries/REST_Controller.php');
 
class Api extends REST_Controller
{
    function __construct()
    {
        // Construct the parent class
        parent::__construct();
		$this->load->helper('cookie');
        $this->load->model ('User_model');
        $this->load->model ('DBfunction');
        $this->load->model ('APIsDBfunction');
        $this->load->library('session');


        header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Headers: *');
		header('Access-Control-Allow-Methods: POST');
        header('Content-Type: *');
        date_default_timezone_set('Asia/Kolkata');        
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    private function hash_password($password) {
        return password_hash ( $password, PASSWORD_BCRYPT );
    }

    public function userLogin_post() {

        $json_data = file_get_contents('php://input');
        $json_data = json_decode($json_data);
       // echo json_encode($json_data);die;

        if (empty($json_data)) {
            $this->response([
                'status' => FALSE,
                'message' => ['no data found','data should be in JSON']
            ], REST_Controller::HTTP_NOT_ACCEPTABLE);
            exit();
        }
        $json_data = null;

        $user_data = [
            'email_id' => $this->post('email_id'),
            'password' => $this->post('password')
        ];

        $result = $this->auth_models->user_login($user_data);

        if ($result === FALSE) {
            $this->response(
                array(
                    'status' => false,
                    'message' => 'Invalid E-Mail ID Or password'
            ), BASE_Controller::HTTP_OK
        );
        } else {
            $this->response(
                array(
                    'status' => false,
                    'message' => 'login successfull...!!!'
            ), BASE_Controller::HTTP_OK
        );
        }
        exit();
    }

    public function login_post(){
        $username = $this->post('username');
        $password = $this->post('password');
        $users = [];
		if (isset($username)) {
			$users = array_merge($users, ['username' => $username]);
		} else {
			$users = array_merge($users, ['username' => null]);
		}

		if (isset($password)) {
			$users = array_merge($users, ['password' => $password]);
		} else {
			$users = array_merge($users, ['password' => null]);
        }
        
        // -------
        
		$errMsg = [];

		if (strlen($users['username']) <= 0) {
			$errMsg = ['username is blank;'];
		}

		if (strlen($users['password']) <= 0) {
			$errMsg = array_merge($errMsg, ['password is blank; blank not acceptable;']);
		}

		if (!empty($errMsg)){
	        $this->response([
	            'status' => 'FALSE',
	            'message' => $errMsg
	        ], REST_Controller::HTTP_OK);
		}
		// -------

        if ($this->User_model->resolve_user_login($users['username'],  $users['password'])) {
            $user_id = $this->User_model->get_user_id_from_username ($users['username']);
            $userdetails = $this->User_model->get_user ($user_id);
            // Automatically generated by the model
            $message = [
                    'login_id' => $user_id,
                    'username' => $users['username'],
                    'user_role'=> $userdetails[0]->user_type,
                    'tabs'=> $userdetails[0]->tabs,
                    'message' => 'Logged in successfully',
                    'status' => 'TRUE'
                ];
				
                $this->session->userid = $user_id;
                $this->session->role = $userdetails[0]->user_type;
                $this->session->hubs = $userdetails[0]->hubs;
                $this->session->username = $users['username'];
                
			
			$name   = 'current_user';
			$value  = $user_id;
			$expire = time()+(10 * 365 * 24 * 60 * 60);
			//$expire = time() + (60 * 1);
			$path  = '/';
            setcookie($name,$value,$expire,$path);
            setcookie('user_id',$user_id,$expire,$path);
            
            $this->set_response($message, REST_Controller::HTTP_OK);
        } else {
            $this->response([
                'status' => 'FALSE',
                'message' => 'Invalid username and password;'
            ], REST_Controller::HTTP_OK);

            $this->set_response($message, REST_Controller::HTTP_OK);
        }
    }

    public function active_Deactive_post(){
        $user_id = $this->post('id');
        $user_where = array('sa_id' =>$user_id );
        $result1 =  $this->DBfunction->getArrayWhereResult('tbl_login',$user_where);
       // print_r($result1);
        $result = array('Status' =>'TRUE');
        if($result1[0]->is_active==1){
            $data = array('is_active' =>0 );
            $uapdate = $this->DBfunction->updateArrayWhereResult('tbl_login', $data, $user_where);
            
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'User deactivated Successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );

        }else{
            $data = array('is_active' =>1 );
            $uapdate = $this->DBfunction->updateArrayWhereResult('tbl_login', $data, $user_where);
             $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'User activated Successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
        }

    }

public function update_User_post(){
		$user_id = $this->post('user_id');
		
		$table = 'tbl_login';
        $user_where = array('sau_name' => $this->post('email'),'sa_id!='=>$user_id);
        $result_data = $this->DBfunction->getArrayWhereResultnew($table, $user_where);
		$email = $this->post('email');
		if(!count($result_data))
		{
		
        
        $full_name = $this->post('full_name');
        $email = $this->post('email');        
        $phone_number = $this->post('phone_number');
        $address = $this->post('address');
        $user_type = $this->post('user_type');
        $country = $this->post('country');                     
        $today_date = date('Y-m-d');

	     $user_data = array('sau_name' =>$email,
						'sau_FName' =>$full_name,                            
						'sau_PhoneNo' =>$phone_number,
						'user_address' =>$address,
						'user_type' =>$user_type,
						'country' =>$country,
						'created_at' =>$today_date,
						'is_active'=>1                           
			        );

        $table = 'tbl_login';
        $user_where= array('sa_id' =>$user_id);
        $update_user = $this->DBfunction->updateArrayWhereResult($table,$user_data,$user_where);
       if($update_user){
		   
        $result = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'User data updated Successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
    }else{
         $result = array('Status' =>'TRUE');
            $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'User data updated Successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
    } 
	}	
	else 
	{
		$result = array('Status' =>'TRUE');
            $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => "This Email id already exists - $email!"
                ]
                ), REST_Controller::HTTP_OK
        );
	}
}

public function change_Password_post(){
    $user_id = $this->post('user_id');
    $password = $this->hash_password($this->post('password'));
   // $password = $this->post('password');
    $table = 'tbl_login';
     $user_data = array('sau_pwd' =>$password );
        $user_where= array('sa_id' =>$user_id);
        $update_password = $this->DBfunction->updateArrayWhereResult($table,$user_data,$user_where);
         if($update_password){
        $result = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'User password updated Successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
    }else{
         $result = array('Status' =>'TRUE');
            $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Something went wrong please try again later !'
                ]
                ), REST_Controller::HTTP_OK
        );
    } 
}

public function top_Five_rating_get(){
    $result = $this->DBfunction->get_top_five_hub();
    echo '<pre>';
    print_r($result);
}

public function logo_Upload_post(){
        $json_data = file_get_contents('php://input');
        $json_data = json_decode($json_data);
        $file_name = $this->post('file_name');        
        $user_id = $this->post('user_id');
        
        $full_name = $this->post('full_name');
        $phone_number = $this->post('phone_number');
        $account_number = $this->post('account_number');
        $account_name = $this->post('account_name');
        $address = $this->post('address');
        
        

       
        $user_where =  array('sa_id' => $user_id);
        
       if($file_name!=''){
        $data = array('sau_LName'=>$file_name, 'account_name'=>$account_name, 'account_number'=>$account_number, 'sau_FName'=>$full_name, 'user_address'=>$address, 'sau_PhoneNo'=>$phone_number);}else{
             $data = array('account_name'=>$account_name, 'account_number'=>$account_number, 'sau_FName'=>$full_name, 'user_address'=>$address, 'sau_PhoneNo'=>$phone_number);
        }
        
        $result2 = $this->DBfunction->updateArrayWhereResult('tbl_login', $data, $user_where);
    if($result2){
     $result = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Logo uploaded successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }else{
         $result = array('Status' =>'Fail');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'Fail', 
                    'message' => 'Something went wrong. Please try again latter !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }



}


public function agreement_Upload_post(){
    $json_data = file_get_contents('php://input');
    $json_data = json_decode($json_data);
    $id= $this->post('id');
    $file_name = $this->post('file_name');

    $agreement_date = $this->post('agreement_date');
    $validity = $this->post('validity');
    $valid_till = $this->post('valid_date');
    $valid = $this->post('valid');
    $id_where = array('id' =>$id );
    $data = array('agreement_name' => $file_name, 'agreement_date'=>$agreement_date,'validity'=>$valid, 'valid_till'=>$valid_till);
    $result = $this->DBfunction->updateArrayWhereResult('tbl_hub', $data , $id_where);
   if($result){
     $result = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Agreement document inserted Successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }else{
         $result = array('Status' =>'Fail');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'Fail', 
                    'message' => 'Something went wrong. Please try again latter !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }
}

public function accept_Agreement_post(){
        $json_data = file_get_contents('php://input');
        $json_data = json_decode($json_data);
        $user_id = $this->post('user_id');
        $acceptecnce_time = $this->post('acceptecnce_time');
        $hub_id = $this->post('hub_id');
        $full_name = $this->post('full_name');

        $data = array('user_id' => $user_id, 'hub_id'=>$hub_id,'acceptecnce_time'=>$acceptecnce_time, 'full_name'=>$full_name);
        $result = $this->DBfunction->insertAll('tbl_agreement_acceptence', $data);
         if($result>0){
     $result = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Agreement accepted successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }else{
         $result = array('Status' =>'Fail');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'Fail', 
                    'message' => 'Something went wrong. Please try again latter !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }
}

public function video_Upload_post(){
    $json_data = file_get_contents('php://input');
    $json_data = json_decode($json_data);
    $file_name = $this->post('file_name');
    $created_date = date('Y-m-d');
    $is_active = 1;
    $is_delete = 1;
    $data = array('video_file' => $file_name, 'created_at'=>$created_date,'is_active'=>$is_active, 'is_delete'=>$is_delete);
     $result = $this->DBfunction->insertAll('training_video', $data);
   if($result>0){
     $result = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Video uploaded successfully !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }else{
         $result = array('Status' =>'Fail');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'Fail', 
                    'message' => 'Something went wrong. Please try again latter !'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }
}

public function video_List_get(){
    $where_array = array('is_active' =>1, 'is_delete'=>1);
     $result['video_data'] = $this->DBfunction->getArrayWhereResult('training_video', $where_array); 
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Video List!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
}


    public function create_User_post(){
		$table = 'tbl_login';
        $user_where = array('sau_name' => $this->post('email'));
        $result_data = $this->DBfunction->getArrayWhereResultnew($table, $user_where);
		$email = $this->post('email');
		if(!count($result_data))
		{
        $full_name = $this->post('full_name');
        
        $password = $this->hash_password($this->post('password'));
        $confirm_password = $this->post('confirm_password');
        $phone_number = $this->post('phone_number');
        $address = $this->post('address');
        $user_type = $this->post('user_type');

        $country = $this->post('country');                     
        $tabs = $this->post('tabs');                     
        $hubs = $this->post('hubs');                     
        $today_date = date('Y-m-d');
        $user_data = array('sau_name' =>$email,
                            'sau_FName' =>$full_name,
                            'sau_pwd' =>$password,
                            'sau_PhoneNo' =>$phone_number,
                            'user_address' =>$address,
                            'user_type' =>$user_type,
                            'country' =>$country,
                            'created_at' =>$today_date,
                            'is_active'=>1,                          
                            'hubs'=> $hubs,                         
                            'tabs'=> $tabs                          
                            );
       $result =  $this->DBfunction->insertAll('tbl_login', $user_data);
       if($result>0 ){
		$result = array('Status' =>'TRUE');
            $this->response (
                array_merge (
                    $user_data, 
                    [
                        'status' => 'TRUE', 
                        'message' => 'User inserted Successfully !'
                    ]
                    ), REST_Controller::HTTP_OK
          );
        
    } 
	else
	{
         $result = array('Status' =>'FALSE');
        $this->response ( 
                [
                    'status' => 'FALSE', 
                    'message' => 'Somethign went wrong! Please try again later; '
                ], REST_Controller::HTTP_OK
        );

    }
	}
	else 
	{
		$result = array('Status' =>'FALSE');
        $this->response (
                [
                    'status' => 'FALSE', 
                    'message' => "This email id already registered - $email!"
                ], REST_Controller::HTTP_OK
        );
	}
    }

    public function edit_User_get($user_id){
        $table = 'tbl_login';
        $user_where = array('sa_id' => $user_id);
        $result = $this->DBfunction->getArrayWhereResultnew($table, $user_where);

        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE'                    
                ]
                ), REST_Controller::HTTP_OK
        );


    }

     public function edit_Userhub_get($user_id){
        $table = 'tbl_hub';
        $table2 = 'hub_previlage';
        $user_where = array('user_id' => $user_id);
        $result['hubs_have'] = $this->DBfunction->getArrayWhereResult($table2, $user_where);
        $result2['hubs'] = $this->DBfunction->getAllResult($table);
        $this->response (
            array_merge (
                $result+$result2, 
                [
                    'status' => 'TRUE'                      
                ]
                ), REST_Controller::HTTP_OK
        );
    }

    public function insert_Hub_performance_post(){
        $json_data = file_get_contents('php://input');
        $json_data = json_decode($json_data);
        if(empty($json_data)){
            $result = array('Not' =>'Not done');
            $this->response (
                    array_merge (
                        $result, 
                        [
                            'status' => 'FALSE', 
                            'message' => 'Csv file is Empty.'
                        ]
                        ), REST_Controller::HTTP_OK
                );
            exit();
        }else{
            $tbl_hub_performance = 'hub_performance';
            $tbl_hub = 'tbl_hub';
            $is_hub_not_found =0;
            if($json_data){
                $count = count($json_data);
                $count;
                foreach ($json_data as $key => $value_hub) {
                    $hub_id = trim($value_hub->hub_id);
                    $hub_array = array('hub_id' =>$hub_id );
                    $hbfound = $this->DBfunction->getArrayWhereResult('tbl_hub',$hub_array);
                    if($hbfound){
                    $is_hub_not_found = $is_hub_not_found+1;
                    }
                }
            }
            if($count == $is_hub_not_found){
                        foreach ($json_data as $key => $value){
                        $date_today = date("Y-m-d h:i:sa");
                        $hub_id = trim($value->hub_id);
                        $hub_name= trim($value->hub_name);
                        $array_where_hub = array('hub_id'=>$hub_id);
                        //hub performance data start
                        $hub_position= trim($value->hub_position);
                        $date = trim($value->date);
                         $date = date('Y-m-d h:i:sa', strtotime($date));
                        $hub_score= trim($value->hub_score);
                        $success_rate= trim($value->success_rate);
                        $fda_sr= trim($value->fda_sr);
                        $remmitance= trim($value->remmitance);
                        $loss_value= trim($value->loss_value);
                        $loss_count= trim($value->loss_count);
                        $cycle_date_range= trim($value->cycle_date_range);
                        $e2e= trim($value->e2e);
                        $metric_of_month= trim($value->metric_of_month);
                        //hub performance data end

                        $hub_data = $this->DBfunction->getArrayWhereResult($tbl_hub,$array_where_hub);                           
                        $insert_id = $hub_data[0]->id;
                           $array_hub_performance = array(
                                'hub_id_f' => $insert_id,
                                'date'=>$date,
                                'hub_score'=>$hub_score,
                                'success_rate'=>$success_rate,
                                'fda_sr'=>$fda_sr,
                                'remmi_tance'=>$remmitance,
                                'loss_value'=>$loss_value,
                                'loss_count'=>$loss_count,
                                'hub_position'=>$hub_position,
                                'cycle'=>$cycle_date_range,
                                'e2e'=>$e2e,
                                'metric_of_month'=>$metric_of_month
                            );
                        $insert_performance_data = $this->DBfunction->insertAll($tbl_hub_performance,$array_hub_performance);
                    }
                    $result = array('Success' =>'Done');
                    $this->response (
                        array_merge (
                            $result, 
                            [
                                'status' => 'TRUE', 
                                'message' => 'Hub performance uploaded successfully.'
                            ]
                            ), REST_Controller::HTTP_OK
                    );
                    exit();

            }else{
                        $result = array('Not' =>'Not Done');
                        $this->response(
                        array_merge (
                        $result, 
                        [
                            'status' => 'FALSE', 
                            'message' => 'Hub is not available in data.'
                        ]
                        ), REST_Controller::HTTP_OK
                        );
                        exit();
            }
    }  
}


    public function insert_Hub_data_post(){
        $json_data = file_get_contents('php://input');
        $json_data = json_decode($json_data);
        if(empty($json_data)){
            $result = array('Not' =>'Not done');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'FALSE', 
                    'message' => 'Csv file is Empty.; '
                ]
                ), REST_Controller::HTTP_OK
        );
        }
        $tbl_hub_performance = 'hub_performance';
        $tbl_hub = 'tbl_hub';
        if($json_data){
        foreach ($json_data as $key => $value){
            $date_today = date("Y-m-d h:i:sa");
            $hub_id = trim($value->hub_id);
            $hub_name= trim($value->hub_name);
            $array_where_hub = array('hub_id'=>$hub_id);

            //hub performance data start
            $hub_position= trim($value->hub_position);
            $hub_score= trim($value->hub_score);
            $success_rate= trim($value->success_rate);
            $fda_sr= trim($value->fda_sr);
            $remmitance= trim($value->remmitance);
            $loss_value= trim($value->loss_value);
            $loss_count= trim($value->loss_count);
            $cycle_date_range= trim($value->cycle_date_range);
            //hub performance data end

            $hub_data = $this->DBfunction->getArrayWhereResult($tbl_hub,$array_where_hub);
            if(empty($hub_data)){
                $hub_insert = array('hub_id' =>$hub_id,
                                    'hub_name'=>$hub_name,
                                    'created_date'=>$date_today);
                $result = $this->DBfunction->insertAll($tbl_hub,$hub_insert);
                if($result>0){
                $insert_id = $this->db->insert_id();
               
               }
            }
            else{ 
                $insert_id = $hub_data[0]->id;
            }
             $array_hub_performance = array(
                    'hub_id_f' => $insert_id,
                    'date'=>$date_today,
                    'hub_score'=>$hub_score,
                    'success_rate'=>$success_rate,
                    'fda_sr'=>$fda_sr,
                    'remmi_tance'=>$remmitance,
                    'loss_value'=>$loss_value,
                    'loss_count'=>$loss_count,
                    'hub_position'=>$hub_position,
                    'cycle'=>$cycle_date_range
                );
             $insert_performance_data = $this->DBfunction->insertAll($tbl_hub_performance,$array_hub_performance);
        }
        
        $result = array('Success' =>'Done');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Hub performance data inserted successfully.'
                ]
                ), REST_Controller::HTTP_OK
        );}
        else{
             $result = array('Not' =>'Not Done');
        $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'FALSE', 
                    'message' => 'User List!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        }
        exit();
        //print_r($json_data);
    }



	public function user_List_get() {
        $result['user_data'] = $this->DBfunction->user_list();
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'User List!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function package_list_get($country='') {
        $where_array=array();
		if($country)
		{
			$where_array=array('tbl_packages.country'=>$country);
		}
		if($this->input->get('statement_id'))
		{
			$where_array['tbl_packages.statement_id']=$this->input->get('statement_id');
		}
		$cols="tbl_packages.id,tbl_packages.tracking_number,tbl_packages.country,tbl_company.company_name as company,tbl_packages.remittance_type,tbl_packages.remittance_amount,tbl_packages.remittance_status,tbl_login.sau_name as creator,tbl_packages.create_at";
		 $result['packages_data'] = $this->DBfunction->new_getPackage_list('tbl_packages',$where_array,'id',$cols); 
			 $this->response (
				array_merge (
					$result, 
					[
						'status' => 'TRUE', 
						'message' => 'Packages List!!!; '
					]
					), REST_Controller::HTTP_OK
		 );
		 exit();
    }
    /* changes for user_id */
    
     /* all pacakage list user_id */
    public function packages_all_List_get($hub_id, $user_id = null) {
         $result['packages_data'] = $this->DBfunction->packages_all_list($hub_id, $user_id); 
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Packages List!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
    /* end all pacakage list user_id */


     public function hubperformence_List_get($user_id = null) {


        $result['performance_data'] = $this->DBfunction->hub_performance_list($user_id);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'hub performance list!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }


    /* for deduction list according user_id */
   public function hubperformence_List2_get($hub_id, $date1 = '', $date2 = '', $user_id = '') {
           
        if(!empty($date1) && !empty($date1)){
        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');
        }else{
            $from_date =  $date1;
            $to_date = $date2;
        }
        
        $result['performance_data'] = $this->DBfunction->hub_performance_list_hub_id($hub_id, $from_date, $to_date, $user_id);

        $result2['hub_score']=$this->DBfunction->get_hub_score($hub_id, $from_date, $to_date, $user_id);

        $result3['hub_position']=$this->DBfunction->get_hub_position($hub_id, $from_date, $to_date, $user_id);

        $result4['fda_sr']= $this->DBfunction->get_hub_fda_sr($hub_id, $from_date, $to_date, $user_id);

        $result5['success_rate']= $this->DBfunction->get_hub_success_rate($hub_id, $from_date, $to_date, $user_id);

        $result6['ranitance']= $this->DBfunction->get_hub_ranitance($hub_id, 'remmi_tance', $from_date, $to_date, $user_id);
        $result7['loss_value']= $this->DBfunction->get_hub_ranitance($hub_id, 'loss_value', $from_date, $to_date, $user_id);
        $result8['loss_count']= $this->DBfunction->get_hub_ranitance($hub_id, 'loss_count', $from_date, $to_date, $user_id);

        $result9['e2e']= $this->DBfunction->get_hub_e2e_rate($hub_id, $from_date, $to_date, $user_id);
        $result10['metric_of_month']= $this->DBfunction->get_hub_mom_rate($hub_id, $from_date, $to_date, $user_id);



         $this->response (
            array_merge (
                $result+$result2+$result3+$result4+$result5+$result6+$result7+$result8+$result9+$result10, 
                [
                    'status' => 'TRUE', 
                    'message' => 'hub performance list!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
    
    public function deduction_List_get($hub_id, $date1, $date2, $user_id = null) {
        $hub_where = array('ded.hub_id_f' =>$hub_id);
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');
        $result['deduction_data'] = $this->DBfunction->deduction_list($hub_where, $from_date, $to_date, $user_id);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'deduction list!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function account_statement_List_get($hub_id = null, $date1, $date2) {
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');
        // echo $to_date.'<br>';
        // echo $from_date.'<br>';
        $result['account_statement'] = $this->DBfunction->account_statement_list($hub_id,$from_date, $to_date);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'account statement list retrive successfully !!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function account_deduction_List_get($hub_id = null, $date1, $date2) {
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');

        $result = $this->DBfunction->account_deduction_list_date($hub_id,$from_date, $to_date);
         $this->response (
            array_merge (
                $result 
                // [
                //     'status' => 'TRUE', 
                //     'message' => 'account statement list retrive successfully !!!; '
                // ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }


    public function account_statement_List_date_get($user_id = null) {
        $result['account_statement'] = $this->DBfunction->account_statement_list($user_id);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'account statement list retrive successfully !!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

  /*Start Total hub for admin and partners*/
  public function total_Hub_get($user_id = null) {
        $result['no_of_hubs'] = $this->DBfunction->total_hub($user_id);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Number Of Hubs'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
   /*End Total hub for admin and partners*/

   /*Start Total partners for admin and partners*/
  public function total_Partner_get($user_id = null) {
        $result['no_of_partners'] = $this->DBfunction->total_partner($user_id);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Number Of Partners'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
   /*End Total partners for admin and partners*/

  /*Start Total Orders for admin and partners*/
  public function total_Orders_get($user_id = null) {
        $result['no_of_orders'] = $this->DBfunction->total_orders($user_id);
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Number Of Partners'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
   /*End Total orders for admin and partners*/
     

      /*Start packages loss for admin and partners*/
  public function loss_Packages_get() {
        $result['loss_packages'] = $this->DBfunction->total_los_packages();
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Number Of lost packages'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
   /*End packages loss for admin and partners*/


      /*Start packages loss for admin and partners*/
  public function total_Picked_get() {
        $result['total_picked'] = $this->DBfunction->total_picked();
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Number Of lost packages'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
   /*End packages loss for admin and partners*/


 /*Start Hub All data for admin partners*/   
    public function huball_Data_get($hub_id, $date1=null, $date2=null){
        // $from_date =  date('Y-m-01');
        // $to_date = date('Y-m-t');
        $from_date =  $date1;
        $to_date = $date2;
        if($date1!=null && $date2!=null){            
        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');
        }

        $result['hub_data'] = $this->DBfunction->total_picked_wherehub('tbl_packages',$hub_id,  $from_date, $to_date);
        $result1['hbdata_total']=$this->DBfunction->total_picked2('tbl_packages',$hub_id);
        
        $revenue['delivered_revenue']=$this->DBfunction->total_revenue('tbl_packages',$hub_id, $from_date, $to_date);

        $arrayWheredays = array('delivery_classification'=>'0-1days','hub_id'=> $hub_id);
        $zero_to_one['zero_to_1_days']=$this->DBfunction->total_picked_0_1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification'=> '2-3days','hub_id'=> $hub_id);
        $two_to_three['two_to_three'] = $this->DBfunction->total_picked_0_1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification'=>'3-4days','hub_id'=> $hub_id,);
        $three_to_four['three_to_four'] = $this->DBfunction->total_picked_0_1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification'=>'4-5days','hub_id'=> $hub_id,);
        $four_to_five['four_to_five'] = $this->DBfunction->total_picked_0_1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification' => '6+days','hub_id'=> $hub_id);
        $six_days_plus['six_days_plus'] = $this->DBfunction->total_picked_0_1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $packages_data['packages_data']= $this->DBfunction->packages_list_by_hub($hub_id,$from_date,$to_date);
         $this->response (
            array_merge (
                $result+$result1+$revenue+$zero_to_one+$two_to_three+$three_to_four+$four_to_five+$six_days_plus+$packages_data, 
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
    /*End Hub All data for admin partners*/


    public function dashboard_Data_get($hub_id, $date1, $date2){
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');

        $result['hub_data'] = $this->DBfunction->total_picked_wherehub('tbl_packages',$hub_id,  $from_date, $to_date);
        $result1['hbdata_total']=$this->DBfunction->total_picked2('tbl_packages',$hub_id, $from_date, $to_date);
        
        $result2['hub_score']=$this->DBfunction->get_hub_score($hub_id,$from_date, $to_date );
        
        $revenue['delivered_revenue']=$this->DBfunction->total_revenue('tbl_packages',$hub_id, $from_date, $to_date);

        $deduction_hub['deduction_hub']=$this->DBfunction->total_deduction('deductions',$hub_id,$from_date, $to_date);

       // $packages_data['packages_data']= $this->DBfunction->packages_list_by_hub($hub_id,$from_date,$to_date);
        $packages_data['packages_data'] = $this->DBfunction->get_top_five_hub();

        $result_chart['chart_result'] = $this->DBfunction->get_last_6_month_r_data($hub_id); 
        $hub_position['hub_position']=$this->DBfunction->get_hub_position($hub_id, $from_date, $to_date);  

        



         $this->response (
            array_merge (
                $result+$result1+$result2+$revenue+$packages_data+$deduction_hub+ $result_chart+$hub_position, 
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function dashboard_Data_user_get($hub_id, $date1, $date2, $user_id){
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');

        $result['hub_data'] = $this->DBfunction->total_picked_wherehub('tbl_packages',$hub_id,  $from_date, $to_date, $user_id);
        $result1['hbdata_total']=$this->DBfunction->total_picked2('tbl_packages',$hub_id, $from_date, $to_date, $user_id);
        
        $result2['hub_score']=$this->DBfunction->get_hub_score($hub_id,$from_date, $to_date , $user_id);
        
        $revenue['delivered_revenue']=$this->DBfunction->total_revenue('tbl_packages',$hub_id, $from_date, $to_date, $user_id);

        $deduction_hub['deduction_hub']=$this->DBfunction->total_deduction('deductions',$hub_id,$from_date, $to_date, $user_id);

       // $packages_data['packages_data']= $this->DBfunction->packages_list_by_hub($hub_id,$from_date,$to_date);
        $packages_data['packages_data'] = $this->DBfunction->get_top_five_hub_user($user_id);

        $result_chart['chart_result'] = $this->DBfunction->get_last_6_month_r_data_user($user_id, $hub_id); 
        $hub_position['hub_position']=$this->DBfunction->get_hub_position($hub_id, $from_date, $to_date, $user_id); 

         $this->response (
            array_merge (
                $result+$result1+$result2+$revenue+$packages_data+$deduction_hub+ $result_chart+$hub_position, 
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function get_6_Month_data_get($hub_id = null){
            $result_chart['chart_result'] = $this->DBfunction->get_last_6_month_r_data($hub_id);

            $this->response (
            array_merge (
                $result_chart, 
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
            
    }

    public function get_6_Month_data_user_get($hub_id = null){
            // $result_chart['chart_result'] = $this->DBfunction->get_last_6_month_r_data($hub_id);  
             $result_chart['chart_result'] = $this->DBfunction->get_last_6_month_r_data_user($user_id, $hub_id); 
            $this->response (
            array_merge (
                $result_chart, 
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
            
    }


    public function huball_Data_earnning_get($hub_id, $date1,$date2){
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');

        $result['hub_data'] = $this->DBfunction->total_picked_wherehub_ear('tbl_packages',$hub_id, $from_date, $to_date);
        $result1['hbdata_total']=$this->DBfunction->total_picked2('tbl_packages',$hub_id,$from_date,$to_date);       
        
        
        $revenue['delivered_revenue']=$this->DBfunction->total_revenue('tbl_packages',$hub_id,$from_date,$to_date);

        $arrayWheredays = array('delivery_classification'=>'0-1days','hub_id'=> $hub_id);
        $zero_to_one['zero_to_1_days']=$this->DBfunction->total_revenue1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification'=> '2-3days','hub_id'=> $hub_id);
        $two_to_three['two_to_three'] = $this->DBfunction->total_revenue1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification'=>'3-4days','hub_id'=> $hub_id);
        $three_to_four['three_to_four'] = $this->DBfunction->total_revenue1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification'=>'4-5days','hub_id'=> $hub_id);
        $four_to_five['four_to_five'] = $this->DBfunction->total_revenue1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $arrayWheredays = array('delivery_classification' => '6+days','hub_id'=> $hub_id);
        $six_days_plus['six_days_plus'] = $this->DBfunction->total_revenue1('tbl_packages',$hub_id,$from_date,$to_date,$arrayWheredays);

        $packages_data['packages_data']= $this->DBfunction->packages_list_by_hub($hub_id,$from_date,$to_date);

        $this->response (
            array_merge (
                $result+$result1+$revenue+$zero_to_one+$two_to_three+$three_to_four+$four_to_five+$six_days_plus+$packages_data,  
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data with range.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function huball_Data_volume_get($hub_id, $date1,$date2){
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');

        $result['hub_data'] = $this->DBfunction->total_picked_wherehub_count('tbl_packages', $hub_id, $from_date, $to_date);
        $result1['hbdata_total']=$this->DBfunction->total_picked_between_date('tbl_packages', $hub_id, $from_date, $to_date);
        
        $revenue['delivered_revenue']=$this->DBfunction->total_revenue('tbl_packages',$hub_id, $from_date, $to_date);

        $arrayWheredays = array('delivery_classification'=>'0-1days','hub_id'=> $hub_id);
        $zero_to_one['zero_to_1_days']=$this->DBfunction->total_volume1('tbl_packages',$hub_id, $from_date,$to_date, $arrayWheredays);

        $arrayWheredays = array('delivery_classification'=> '2-3days','hub_id'=> $hub_id);
        $two_to_three['two_to_three'] = $this->DBfunction->total_volume1('tbl_packages',$hub_id, $from_date,$to_date, $arrayWheredays);

        $arrayWheredays = array('delivery_classification'=>'3-4days','hub_id'=> $hub_id);
        $three_to_four['three_to_four'] = $this->DBfunction->total_volume1('tbl_packages',$hub_id, $from_date, $to_date, $arrayWheredays);

        $arrayWheredays = array('delivery_classification'=>'4-5days','hub_id'=> $hub_id);
        $four_to_five['four_to_five'] = $this->DBfunction->total_volume1('tbl_packages',$hub_id, $from_date, $to_date, $arrayWheredays);

        $arrayWheredays = array('delivery_classification' => '6+days','hub_id'=> $hub_id);
        $six_days_plus['six_days_plus'] = $this->DBfunction->total_volume1('tbl_packages',$hub_id, $from_date, $to_date, $arrayWheredays);

        $packages_data['packages_data']= $this->DBfunction->packages_list_by_hub($hub_id, $from_date, $to_date);

        $this->response (
            array_merge (
                $result+$result1+$revenue+$zero_to_one+$two_to_three+$three_to_four+$four_to_five+$six_days_plus+$packages_data,  
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data with range.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

 public function account_Statement_get($date1=null,$date2=null){
        $from_date =  $date1;
        $to_date = $date2;
        if($date1!=null && $date2!=null){
        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');
        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');
        }
        $result['account_data'] = $this->DBfunction->account_statement_list_date($from_date,$to_date);
        $this->response (
            array_merge (
                $result,  
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data with range.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }

    public function account_Statement_user_get($date1,$date2,$user_id){
        $from_date =  $date1;
        $to_date = $date2;

        $from_date_old = DateTime::createFromFormat('m-d-Y', $date1);
        $from_date = $from_date_old->format('Y-m-d');

        $to_date_old = DateTime::createFromFormat('m-d-Y', $date2);
        $to_date = $to_date_old->format('Y-m-d');

        $result['account_data'] = $this->DBfunction->account_statement_user_list_date($from_date,$to_date,$user_id);
        $this->response (
            array_merge (
                $result,  
                [
                    'status' => 'TRUE', 
                    'message' => 'You are getting hub data with range.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();

    }

    public function get_Username_get($user_id){
          
        $userid_where = array('sa_id' => $user_id );
        $result = $this->DBfunction->get_user_details('tbl_login',$userid_where);
         $this->response (
            array_merge (
                $result,  
                [                   
                    'status' => 'TRUE', 
                    'message' => 'You are getting user name.'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
    
    public function logo_Image_get($user_id){
$where_user = array('sa_id' =>$user_id);
$result = $this->DBfunction->getArrayWhereResult('tbl_login', $where_user);
 if($result){
     $result2 = array('Status' =>'TRUE');
        $this->response (
            array_merge (
                $result
                
                ), REST_Controller::HTTP_OK
        );
        exit();
   }else{
         $result = array('Status' =>'Fail');
        $this->response (
            array_merge (                 
                [
                    'status' => 'Fail', 
                    'message' => 'No image'
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
   }
}

public function agreement_List_admin_get(){
        $result['hub_data'] = $this->DBfunction->hub_agreement_accepance(); 
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Hub List!!!; '
                ]
                ), REST_Controller::HTTP_OK
        );
        exit();
    }
public function country_list_get(){      
	$result['country_data'] = $this->DBfunction->getAllResult('apps_countries'); 
	 $this->response (
		array_merge (
			$result, 
			[
				'status' => 'TRUE', 
				'message' => 'Country List!!!; '
			]
			), REST_Controller::HTTP_OK
	);
	exit();
}
public function company_list_get($country='')
{
	$where_array=array();
	if($country)
	{
		$where_array=array('country'=>$country);
	}
	
	$cols="id as srno,external_bussiness_id,company_name,country";
	 $result['customer_data'] = $this->DBfunction->new_getallWhereResultForIdDESC('tbl_company',$where_array,'id',$cols); 
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Customer List!!!; '
                ]
                ), REST_Controller::HTTP_OK
     );
     exit();
}
public function delete_packages_get($id)
{
	$table="tbl_packages";	
	$data_array=array("id"=>$id,'remittance_status !='=>'Remitted');
	$deletes=$this->DBfunction->delete_array($table, $data_array); 
	if($deletes)
	{
		echo "<script>alert('Delete Successfully!');</script>";
		return redirect('http://finz.opmovings.com/packages.php?msg=deleted');
	}
	else 
	{
		echo "<script>alert('Error! Something went wrong!');</script>";
		return redirect('http://finz.opmovings.com/packages.php?msg=error');
	}
	
}
public function company_dataoption_get()
{
	$result['company_data'] = $this->DBfunction->company_validdata(); 
	 $this->response (
		array_merge (
			$result, 
			[
				'status' => 'TRUE', 
				'message' => 'Company List!!!; '
			]
			), REST_Controller::HTTP_OK
	);
	exit();
}
public function add_remittance_post()
{
	$post=$this->input->post();
	$user_data['country']=$post['country'];
	$user_data['company']=$post['company'];
	$user_data['remittance_type']=$post['remittance_type'];
	$user_data['creator']=$post['user_id'];
	$user_data['create_at']=date('Y-m-d H:i:s');
	$user_data['statement_id']=rand(999999,999999999);
	$insert_data=$this->DBfunction->insertAll('tbl_remittance',$user_data); 
	if($insert_data)
	{
		$row_statement=$user_data['statement_id'];
		/*$this->DBfunction->updateArrayWhereResult('tbl_remittance',array('statement_id'=>$row_statement), array('id'=>$insert_data));
		*/
		$this->DBfunction->updateArrayWhereResult('tbl_packages',array('statement_id'=>$row_statement), array('company'=>$user_data['company'],'remittance_status'=>'Not Remitted'));
		return redirect('http://finz.opmovings.com/remittance_statement.php?msg=success');
		
	}
	else 
	{
		return redirect('http://finz.opmovings.com/remittance_statement.php?msg=error');
	}
}
public function remittance_list_get($country='')
{
	$where_array=array();
	if($country)
	{
		$where_array=array('country'=>$country);
	}
	$result['remittance_data'] = $this->DBfunction->get_remittancedata($where_array); 
         $this->response (
            array_merge (
                $result, 
                [
                    'status' => 'TRUE', 
                    'message' => 'Remittance List!!!; '
                ]
                ), REST_Controller::HTTP_OK
     );
     exit();
}
public function updates_remittance_post()
{
	$post=$this->input->post();
	$user_data['payment_date']=$post['payment_date'];
	$user_data['payment_reference']=$post['package_referene'];
	$user_data['payment_editor']=$post['user_id'];
	$user_data['payment_edit_at']=date('Y-m-d H:i:s');
	$user_data['remittance_status']='Remitted';
	$statement_id=$post['statement_id'];
	$update_data=$this->DBfunction->updateArrayWhereResult('tbl_remittance', $user_data, array('statement_id'=>$statement_id));
	if($update_data)
	{
		$user_datanew['remittance_status']='Remitted';
		$this->DBfunction->updateArrayWhereResult('tbl_packages', $user_datanew, array('statement_id'=>$statement_id));
		return redirect('http://finz.opmovings.com/remittance_statement.php?msg=update');
		
	}
	else 
	{
		return redirect('http://finz.opmovings.com/remittance_statement.php?msg=error');
	}
}
public function delete_remittance_statement_get($statement_id)
{
	$table="tbl_remittance";	
	$data_array=array("statement_id"=>$statement_id,'remittance_status !='=>'Remitted');
	$deletes=$this->DBfunction->delete_array($table, $data_array); 
	if($deletes)
	{
		$user_datanew['statement_id']=NULL;
		$this->DBfunction->updateArrayWhereResult('tbl_packages', $user_datanew, array('statement_id'=>$statement_id));
		echo "<script>alert('Delete Successfully!');</script>";
		return redirect('http://finz.opmovings.com/remittance_statement.php?msg=deleted');
	}
	else 
	{
		echo "<script>alert('Error! Something went wrong!');</script>";
		return redirect('http://finz.opmovings.com/remittance_statement.php?msg=error');
	}
	
}

public function logout(){
	$this->session->unset_userdata('user_id');
    $this->session->sess_destroy();
    return 1;
}

    
}
?>